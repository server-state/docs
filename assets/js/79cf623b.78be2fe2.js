"use strict";(self.webpackChunktelestion_docs=self.webpackChunktelestion_docs||[]).push([[416],{7178:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return m},toc:function(){return d},default:function(){return p}});var a=n(7462),i=n(3366),o=(n(7294),n(3905)),s=n(8168),r=["components"],l={title:"Maintainer's Tasks",description:"An overview of the tasks maintainers of the Telestion project modules have to fulfill"},c=void 0,m={unversionedId:"internal/references/maintainers-tasks",id:"internal/references/maintainers-tasks",isDocsHomePage:!1,title:"Maintainer's Tasks",description:"An overview of the tasks maintainers of the Telestion project modules have to fulfill",source:"@site/docs/internal/references/maintainers-tasks.mdx",sourceDirName:"internal/references",slug:"/internal/references/maintainers-tasks",permalink:"/telestion-docs/internal/references/maintainers-tasks",editUrl:"https://github.com/wuespace/telestion-docs/edit/main/docs/internal/references/maintainers-tasks.mdx",version:"current",frontMatter:{title:"Maintainer's Tasks",description:"An overview of the tasks maintainers of the Telestion project modules have to fulfill"},sidebar:"tutorialSidebar",previous:{title:"Key Git Principles",permalink:"/telestion-docs/internal/references/key-git-principles"}},d=[{value:"CLAs",id:"clas",children:[]},{value:"Conventional Commits",id:"conventional-commits",children:[]}],h={toc:d};function p(e){var t=e.components,n=(0,i.Z)(e,r);return(0,o.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This document provides a reference of the key tasks maintainers within the\nTelestion ecosystem have to fulfill."),(0,o.kt)("h2",{id:"clas"},"CLAs"),(0,o.kt)("p",null,"Make sure that all contributions are by contributors who have signed the CLA.\nOtherwise, this project will get into a lot of legal trouble."),(0,o.kt)("div",{className:"admonition admonition-danger alert alert--danger"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"danger")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"If a Pull Request doesn't contain a filled checkbox or other notice about the\ncontributor having signed the NDA, ",(0,o.kt)("strong",{parentName:"p"}," don't merge it!"),". If you suspect you\nmight have made a mistake in this regard, please talk to your team leader about\nit immediately."))),(0,o.kt)("h2",{id:"conventional-commits"},"Conventional Commits"),(0,o.kt)("p",null,"Make sure that every change has a conventional commit associated with it."),(0,o.kt)("p",null,"Having a conventional commit for every change enables our tools to automatically\ngenerate the release notes and the next released version. Thus, if a branch has\nvalid and correct conventional commit messages, you can go ahead and merge it by\nrebasing it onto the ",(0,o.kt)("inlineCode",{parentName:"p"},"main")," branch."),(0,o.kt)("p",null,"Otherwise, you may have to squash and merge using a valid conventional commit\nmessage. In the end, the only important thing is that every change that's\nrelevant for the following type of version (for example, a feature or a breaking\nchange) or the next version's release notes have a valid conventional commit for\nit in the main branch."),(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"Merge commits")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Merge commits appear not to get used (to their full extent). Therefore, if, for\nmerging a Pull Request, you need a new conventional commit message, use Squash\nand Merge"))),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},'For some contributions, it just isn\'t practical to have one mergeable branch per\nchange. For example, refactoring might, in the process, also fix a lot of old\nissues. In that case, you can squash and merge using the "biggest" applicable\nconventional commit (for example, ',(0,o.kt)("inlineCode",{parentName:"p"},"feat: Big Refactoring"),"), while putting\n",(0,o.kt)("inlineCode",{parentName:"p"},"Closes: #issuenumber")," for every closed issue into the commit's footer. So even\nthough fixing a bug would, initially, be a fix, the feature of an overall\nrefactoring (with possibly a few breaking changes) outweighs that, and fixing a\nbug is just a side-effect."))),(0,o.kt)(s.s3,{to:"./conventional-commit-types",mdxType:"Reference"},"More information regarding conventional commit types"))}p.isMDXComponent=!0}}]);