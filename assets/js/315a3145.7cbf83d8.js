"use strict";(self.webpackChunk_server_state_docs=self.webpackChunk_server_state_docs||[]).push([[139],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=c(n),d=r,f=p["".concat(l,".").concat(d)]||p[d]||u[d]||i;return n?a.createElement(f,o(o({ref:t},m),{},{components:n})):a.createElement(f,o({ref:t},m))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},8169:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return m},toc:function(){return u},default:function(){return d}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=n(4966),s=["components"],l={title:"Maintainer's Tasks",description:"An overview of the tasks maintainers of Server State repositories have to fulfill"},c=void 0,m={unversionedId:"references/maintainers-tasks",id:"references/maintainers-tasks",title:"Maintainer's Tasks",description:"An overview of the tasks maintainers of Server State repositories have to fulfill",source:"@site/internal/references/maintainers-tasks.mdx",sourceDirName:"references",slug:"/references/maintainers-tasks",permalink:"/internal/references/maintainers-tasks",editUrl:"https://github.com/server-state/docs/edit/main/internal/references/maintainers-tasks.mdx",tags:[],version:"current",lastUpdatedBy:"pklaschka",lastUpdatedAt:1629328212,formattedLastUpdatedAt:"8/18/2021",frontMatter:{title:"Maintainer's Tasks",description:"An overview of the tasks maintainers of Server State repositories have to fulfill"},sidebar:"sidebar",previous:{title:"Key Git Principles",permalink:"/internal/references/key-git-principles"},next:{title:"Redis-based User Database Structure",permalink:"/internal/references/redis-user-database"}},u=[{value:"Conventional Commits",id:"conventional-commits",children:[],level:2}],p={toc:u};function d(e){var t=e.components,n=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This document provides a reference of the key tasks maintainers within the\nServer State ecosystem have to fulfill."),(0,i.kt)("h2",{id:"conventional-commits"},"Conventional Commits"),(0,i.kt)("p",null,"Make sure that every change has a conventional commit associated with it."),(0,i.kt)("p",null,"Having a conventional commit for every change enables our tools to automatically\ngenerate the release notes and the next released version. Thus, if a branch has\nvalid and correct conventional commit messages, you can go ahead and merge it by\nrebasing it onto the ",(0,i.kt)("inlineCode",{parentName:"p"},"main")," branch."),(0,i.kt)("p",null,"Otherwise, you may have to squash and merge using a valid conventional commit\nmessage. In the end, the only important thing is that every change that's\nrelevant for the following type of version (for example, a feature or a breaking\nchange) or the next version's release notes have a valid conventional commit for\nit in the main branch."),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"Merge commits")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Merge commits appear not to get used (to their full extent). Therefore, if, for\nmerging a Pull Request, you need a new conventional commit message, use Squash\nand Merge"))),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},'For some contributions, it just isn\'t practical to have one mergeable branch per\nchange. For example, refactoring might, in the process, also fix a lot of old\nissues. In that case, you can squash and merge using the "biggest" applicable\nconventional commit (for example, ',(0,i.kt)("inlineCode",{parentName:"p"},"feat: Big Refactoring"),"), while putting\n",(0,i.kt)("inlineCode",{parentName:"p"},"Closes: #issuenumber")," for every closed issue into the commit's footer. So even\nthough fixing a bug would, initially, be a fix, the feature of an overall\nrefactoring (with possibly a few breaking changes) outweighs that, and fixing a\nbug is just a side-effect."))),(0,i.kt)(o.s3,{to:"./conventional-commit-types",mdxType:"Reference"},"More information regarding conventional commit types"))}d.isMDXComponent=!0},4966:function(e,t,n){n.d(t,{kN:function(){return l},rj:function(){return r},Ee:function(){return d},s3:function(){return o}});var a=n(7294);function r(e){var t=e.cols,n=void 0===t?2:t,r=e.children;return a.createElement("div",{style:{display:"grid",gridTemplateColumns:"repeat("+n+", 1fr)",columnGap:"1em"}},r)}var i=n(9960);function o(e){var t=e.children,n=e.to,r=n.endsWith(".mdx")?n.substr(0,n.length-4):n;return a.createElement(i.Z,{to:r,className:"block-link"},a.createElement("span",null,t," \xbb"),a.createElement("span",null,r))}var s=function(){return a.createElement("svg",{width:"1em",height:"1em",viewBox:"0 0 24 24"},a.createElement("defs",null,a.createElement("style",null,".a{clip-path:url(#b);}"),a.createElement("clipPath",{id:"b"},a.createElement("rect",{width:24,height:24}))),a.createElement("g",{id:"a",className:"a"},a.createElement("path",{fill:"currentColor",d:"M4,20a4,4,0,0,1-4-4V12a2,2,0,0,1,2-2v6a2,2,0,0,0,2,2H16a2,2,0,0,0,2-2V10a2,2,0,0,1,2,2v4a4,4,0,0,1-4,4Zm5.389-6.208-.02-.015h0l-.02-.016c-.02-.016-.038-.034-.057-.052L3.636,8.05A1,1,0,1,1,5.05,6.636L9,10.587V1a1,1,0,0,1,2,0v9.586l3.949-3.95A1,1,0,0,1,16.364,8.05l-5.639,5.638a1,1,0,0,1-1.336.1Z",transform:"translate(2 2)"})))};function l(e){var t=e.children,n=e.file,r=n.startsWith("/static")?n.substr(7):n;return a.createElement("a",{className:"block-link",download:!0,href:r},a.createElement("span",null,a.createElement(s,null)," ",t))}var c=n(7462),m=n(3366),u=n(4996),p=["src","invertible","alt"];function d(e){var t=e.src,n=e.invertible,r=void 0!==n&&n,o=e.alt,s=void 0===o?"":o,l=(0,m.Z)(e,p),d=t.startsWith("/static")?t.substr(7):t,f=(0,u.Z)(d);return a.createElement(a.Fragment,null,a.createElement(i.Z,{to:d,style:{display:"none"}},"Link to ",s),a.createElement("img",(0,c.Z)({src:f,className:r?"invertible":"",alt:s},l)))}}}]);