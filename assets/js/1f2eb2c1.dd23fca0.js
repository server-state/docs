"use strict";(self.webpackChunk_server_state_docs=self.webpackChunk_server_state_docs||[]).push([[977],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>p});var l=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,l,r=function(e,t){if(null==e)return{};var n,l,r={},a=Object.keys(e);for(l=0;l<a.length;l++)n=a[l],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(l=0;l<a.length;l++)n=a[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=l.createContext({}),s=function(e){var t=l.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return l.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},m=l.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=s(n),p=r,f=m["".concat(c,".").concat(p)]||m[p]||d[p]||a;return n?l.createElement(f,o(o({ref:t},u),{},{components:n})):l.createElement(f,o({ref:t},u))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var s=2;s<a;s++)o[s]=n[s];return l.createElement.apply(null,o)}return l.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9548:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>u});var l=n(7462),r=(n(7294),n(3905)),a=n(4966);const o={title:"Conventional Commit Types",description:"Quickly find out which conventional commit type you need to use."},i=void 0,c={unversionedId:"references/conventional-commit-types",id:"references/conventional-commit-types",title:"Conventional Commit Types",description:"Quickly find out which conventional commit type you need to use.",source:"@site/internal/references/conventional-commit-types.mdx",sourceDirName:"references",slug:"/references/conventional-commit-types",permalink:"/internal/references/conventional-commit-types",draft:!1,editUrl:"https://github.com/server-state/docs/edit/main/internal/references/conventional-commit-types.mdx",tags:[],version:"current",lastUpdatedBy:"Pablo Klaschka",lastUpdatedAt:1629322272,formattedLastUpdatedAt:"Aug 18, 2021",frontMatter:{title:"Conventional Commit Types",description:"Quickly find out which conventional commit type you need to use."},sidebar:"sidebar",previous:{title:"Branch Naming Guidelines",permalink:"/internal/references/branch-names"},next:{title:"Key Git Principles",permalink:"/internal/references/key-git-principles"}},s={},u=[{value:"Diagram",id:"diagram",level:2},{value:"Table",id:"table",level:2},{value:"See also",id:"see-also",level:2}],d={toc:u};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,l.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This document gives you a quick way to determine the correct conventional commit\ntype for your change."),(0,r.kt)("h2",{id:"diagram"},"Diagram"),(0,r.kt)(a.Ee,{src:"/static/img/drawio-diagrams/conventional-commits/conventional-commits-decision-table.drawio.svg",invertible:!0,mdxType:"Image"}),(0,r.kt)("h2",{id:"table"},"Table"),(0,r.kt)("admonition",{title:"Multiple Commit Types",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Use the most extensive type (the highest in the table below) if a commit\nincludes more than one commit type. Using the broadest type ensures correct\nversioning. For example, if a feature, as a side-effect, also fixes a bug, it's\nstill a feature. If it closes an issue, please still include\n",(0,r.kt)("inlineCode",{parentName:"p"},"Closes: #issue-number")," in the commit's footer to signify the fix")),(0,r.kt)("admonition",{title:"Breaking Changes",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"If a commit has breaking changes, you need to declare it using an exclamation\nmark (",(0,r.kt)("inlineCode",{parentName:"p"},"!"),") before the colon (between the type and the colon (",(0,r.kt)("inlineCode",{parentName:"p"},":"),"), for example,\n",(0,r.kt)("inlineCode",{parentName:"p"},"fix!: Hello world"),", or, if it exists, the scope and the colon, for example,\n",(0,r.kt)("inlineCode",{parentName:"p"},"feat(scope)!: Hello World"),"). With breaking changes, you should include a\n",(0,r.kt)("inlineCode",{parentName:"p"},"BREAKING CHANGE: [description]")," footer describing the breaking change.")),(0,r.kt)("table",{id:"table_fhj_gnv_vnb"},(0,r.kt)("thead",null,(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("i",null,"Conventional Commit Type")),(0,r.kt)("td",null,"Changelog entry"),(0,r.kt)("td",null,"Minimum Version Bump"),(0,r.kt)("td",null,"Description"))),(0,r.kt)("tbody",null,(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("code",null,"feat")),(0,r.kt)("td",null,(0,r.kt)("q",null,"Features")),(0,r.kt)("td",null,"minor (major if breaking)"),(0,r.kt)("td",null,"Newly implemented features")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("code",null,"fix")),(0,r.kt)("td",null,(0,r.kt)("q",null,"Bug Fixes")),(0,r.kt)("td",null,"patch (major if breaking)"),(0,r.kt)("td",null,"Bug fixes")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("code",null,"docs")),(0,r.kt)("td",null,(0,r.kt)("q",null,"Documentation Changes")),(0,r.kt)("td",null,"patch"),(0,r.kt)("td",null,"Documentation-only changes.")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("code",null,"chore")),(0,r.kt)("td",null,"n/a"),(0,r.kt)("td",null,"patch"),(0,r.kt)("td",null,"Meta changes that don't change the actual product, but rather the build system, CI configuration, repo structure, etc.")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("code",null,"style")),(0,r.kt)("td",null,"n/a"),(0,r.kt)("td",null,"patch"),(0,r.kt)("td",null,"Changes that only affect the code style (fixed linting issues, etc.)")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("code",null,"refactor")),(0,r.kt)("td",null,"n/a"),(0,r.kt)("td",null,"patch"),(0,r.kt)("td",null,"Refactorings only causing internal changes not affecting the actual behavior")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("code",null,"perf")),(0,r.kt)("td",null,"n/a"),(0,r.kt)("td",null,"patch"),(0,r.kt)("td",null,"Performance-only changes, not affecting the actual behavior")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("code",null,"test")),(0,r.kt)("td",null,"n/a"),(0,r.kt)("td",null,"patch"),(0,r.kt)("td",null,"Added, removed or changed unit, integration or E2E tests. May not include changes to the source code.")))),(0,r.kt)("h2",{id:"see-also"},"See also"),(0,r.kt)(a.s3,{to:"../concepts/conventional-commits",mdxType:"Reference"},"Conventional Commits Concept"))}m.isMDXComponent=!0},4966:(e,t,n)=>{n.d(t,{kN:()=>c,rj:()=>r,Ee:()=>d,s3:()=>o});var l=n(7294);function r(e){let{cols:t=2,children:n}=e;return l.createElement("div",{style:{display:"grid",gridTemplateColumns:`repeat(${t}, 1fr)`,columnGap:"1em"}},n)}var a=n(9960);function o(e){let{children:t,to:n}=e;const r=n.endsWith(".mdx")?n.substr(0,n.length-4):n;return l.createElement(a.Z,{to:r,className:"block-link"},l.createElement("span",null,t," \xbb"),l.createElement("span",null,r))}const i=()=>l.createElement("svg",{width:"1em",height:"1em",viewBox:"0 0 24 24"},l.createElement("defs",null,l.createElement("style",null,".a{clip-path:url(#b);}"),l.createElement("clipPath",{id:"b"},l.createElement("rect",{width:24,height:24}))),l.createElement("g",{id:"a",className:"a"},l.createElement("path",{fill:"currentColor",d:"M4,20a4,4,0,0,1-4-4V12a2,2,0,0,1,2-2v6a2,2,0,0,0,2,2H16a2,2,0,0,0,2-2V10a2,2,0,0,1,2,2v4a4,4,0,0,1-4,4Zm5.389-6.208-.02-.015h0l-.02-.016c-.02-.016-.038-.034-.057-.052L3.636,8.05A1,1,0,1,1,5.05,6.636L9,10.587V1a1,1,0,0,1,2,0v9.586l3.949-3.95A1,1,0,0,1,16.364,8.05l-5.639,5.638a1,1,0,0,1-1.336.1Z",transform:"translate(2 2)"})));function c(e){let{children:t,file:n}=e;const r=n.startsWith("/static")?n.substr(7):n;return l.createElement("a",{className:"block-link",download:!0,href:r},l.createElement("span",null,l.createElement(i,null)," ",t))}var s=n(7462),u=n(4996);function d(e){let{src:t,invertible:n=!1,alt:r="",...o}=e;const i=t.startsWith("/static")?t.substr(7):t,c=(0,u.Z)(i);return l.createElement(l.Fragment,null,l.createElement(a.Z,{to:i,style:{display:"none"}},"Link to ",r),l.createElement("img",(0,s.Z)({src:c,className:n?"invertible":"",alt:r},o)))}}}]);