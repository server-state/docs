"use strict";(self.webpackChunk_server_state_docs=self.webpackChunk_server_state_docs||[]).push([[977],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return p}});var r=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,a=e.originalType,c=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),m=u(n),p=l,f=m["".concat(c,".").concat(p)]||m[p]||d[p]||a;return n?r.createElement(f,i(i({ref:t},s),{},{components:n})):r.createElement(f,i({ref:t},s))}));function p(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=n.length,i=new Array(a);i[0]=m;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var u=2;u<a;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9548:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return u},default:function(){return f},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return m}});var r=n(7462),l=n(3366),a=(n(7294),n(3905)),i=n(4966),o=["components"],c={title:"Conventional Commit Types",description:"Quickly find out which conventional commit type you need to use."},u=void 0,s={unversionedId:"references/conventional-commit-types",id:"references/conventional-commit-types",title:"Conventional Commit Types",description:"Quickly find out which conventional commit type you need to use.",source:"@site/internal/references/conventional-commit-types.mdx",sourceDirName:"references",slug:"/references/conventional-commit-types",permalink:"/internal/references/conventional-commit-types",draft:!1,editUrl:"https://github.com/server-state/docs/edit/main/internal/references/conventional-commit-types.mdx",tags:[],version:"current",lastUpdatedBy:"Pablo Klaschka",lastUpdatedAt:1629322272,formattedLastUpdatedAt:"Aug 18, 2021",frontMatter:{title:"Conventional Commit Types",description:"Quickly find out which conventional commit type you need to use."},sidebar:"sidebar",previous:{title:"Branch Naming Guidelines",permalink:"/internal/references/branch-names"},next:{title:"Key Git Principles",permalink:"/internal/references/key-git-principles"}},d={},m=[{value:"Diagram",id:"diagram",level:2},{value:"Table",id:"table",level:2},{value:"See also",id:"see-also",level:2}],p={toc:m};function f(e){var t=e.components,n=(0,l.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This document gives you a quick way to determine the correct conventional commit\ntype for your change."),(0,a.kt)("h2",{id:"diagram"},"Diagram"),(0,a.kt)(i.Ee,{src:"/static/img/drawio-diagrams/conventional-commits/conventional-commits-decision-table.drawio.svg",invertible:!0,mdxType:"Image"}),(0,a.kt)("h2",{id:"table"},"Table"),(0,a.kt)("admonition",{title:"Multiple Commit Types",type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Use the most extensive type (the highest in the table below) if a commit\nincludes more than one commit type. Using the broadest type ensures correct\nversioning. For example, if a feature, as a side-effect, also fixes a bug, it's\nstill a feature. If it closes an issue, please still include\n",(0,a.kt)("inlineCode",{parentName:"p"},"Closes: #issue-number")," in the commit's footer to signify the fix")),(0,a.kt)("admonition",{title:"Breaking Changes",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"If a commit has breaking changes, you need to declare it using an exclamation\nmark (",(0,a.kt)("inlineCode",{parentName:"p"},"!"),") before the colon (between the type and the colon (",(0,a.kt)("inlineCode",{parentName:"p"},":"),"), for example,\n",(0,a.kt)("inlineCode",{parentName:"p"},"fix!: Hello world"),", or, if it exists, the scope and the colon, for example,\n",(0,a.kt)("inlineCode",{parentName:"p"},"feat(scope)!: Hello World"),"). With breaking changes, you should include a\n",(0,a.kt)("inlineCode",{parentName:"p"},"BREAKING CHANGE: [description]")," footer describing the breaking change.")),(0,a.kt)("table",{id:"table_fhj_gnv_vnb"},(0,a.kt)("thead",null,(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("i",null,"Conventional Commit Type")),(0,a.kt)("td",null,"Changelog entry"),(0,a.kt)("td",null,"Minimum Version Bump"),(0,a.kt)("td",null,"Description"))),(0,a.kt)("tbody",null,(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("code",null,"feat")),(0,a.kt)("td",null,(0,a.kt)("q",null,"Features")),(0,a.kt)("td",null,"minor (major if breaking)"),(0,a.kt)("td",null,"Newly implemented features")),(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("code",null,"fix")),(0,a.kt)("td",null,(0,a.kt)("q",null,"Bug Fixes")),(0,a.kt)("td",null,"patch (major if breaking)"),(0,a.kt)("td",null,"Bug fixes")),(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("code",null,"docs")),(0,a.kt)("td",null,(0,a.kt)("q",null,"Documentation Changes")),(0,a.kt)("td",null,"patch"),(0,a.kt)("td",null,"Documentation-only changes.")),(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("code",null,"chore")),(0,a.kt)("td",null,"n/a"),(0,a.kt)("td",null,"patch"),(0,a.kt)("td",null,"Meta changes that don't change the actual product, but rather the build system, CI configuration, repo structure, etc.")),(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("code",null,"style")),(0,a.kt)("td",null,"n/a"),(0,a.kt)("td",null,"patch"),(0,a.kt)("td",null,"Changes that only affect the code style (fixed linting issues, etc.)")),(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("code",null,"refactor")),(0,a.kt)("td",null,"n/a"),(0,a.kt)("td",null,"patch"),(0,a.kt)("td",null,"Refactorings only causing internal changes not affecting the actual behavior")),(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("code",null,"perf")),(0,a.kt)("td",null,"n/a"),(0,a.kt)("td",null,"patch"),(0,a.kt)("td",null,"Performance-only changes, not affecting the actual behavior")),(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("code",null,"test")),(0,a.kt)("td",null,"n/a"),(0,a.kt)("td",null,"patch"),(0,a.kt)("td",null,"Added, removed or changed unit, integration or E2E tests. May not include changes to the source code.")))),(0,a.kt)("h2",{id:"see-also"},"See also"),(0,a.kt)(i.s3,{to:"../concepts/conventional-commits",mdxType:"Reference"},"Conventional Commits Concept"))}f.isMDXComponent=!0},4966:function(e,t,n){n.d(t,{kN:function(){return c},rj:function(){return l},Ee:function(){return p},s3:function(){return i}});var r=n(7294);function l(e){var t=e.cols,n=void 0===t?2:t,l=e.children;return r.createElement("div",{style:{display:"grid",gridTemplateColumns:"repeat("+n+", 1fr)",columnGap:"1em"}},l)}var a=n(9960);function i(e){var t=e.children,n=e.to,l=n.endsWith(".mdx")?n.substr(0,n.length-4):n;return r.createElement(a.Z,{to:l,className:"block-link"},r.createElement("span",null,t," \xbb"),r.createElement("span",null,l))}var o=function(){return r.createElement("svg",{width:"1em",height:"1em",viewBox:"0 0 24 24"},r.createElement("defs",null,r.createElement("style",null,".a{clip-path:url(#b);}"),r.createElement("clipPath",{id:"b"},r.createElement("rect",{width:24,height:24}))),r.createElement("g",{id:"a",className:"a"},r.createElement("path",{fill:"currentColor",d:"M4,20a4,4,0,0,1-4-4V12a2,2,0,0,1,2-2v6a2,2,0,0,0,2,2H16a2,2,0,0,0,2-2V10a2,2,0,0,1,2,2v4a4,4,0,0,1-4,4Zm5.389-6.208-.02-.015h0l-.02-.016c-.02-.016-.038-.034-.057-.052L3.636,8.05A1,1,0,1,1,5.05,6.636L9,10.587V1a1,1,0,0,1,2,0v9.586l3.949-3.95A1,1,0,0,1,16.364,8.05l-5.639,5.638a1,1,0,0,1-1.336.1Z",transform:"translate(2 2)"})))};function c(e){var t=e.children,n=e.file,l=n.startsWith("/static")?n.substr(7):n;return r.createElement("a",{className:"block-link",download:!0,href:l},r.createElement("span",null,r.createElement(o,null)," ",t))}var u=n(7462),s=n(3366),d=n(4996),m=["src","invertible","alt"];function p(e){var t=e.src,n=e.invertible,l=void 0!==n&&n,i=e.alt,o=void 0===i?"":i,c=(0,s.Z)(e,m),p=t.startsWith("/static")?t.substr(7):t,f=(0,d.Z)(p);return r.createElement(r.Fragment,null,r.createElement(a.Z,{to:p,style:{display:"none"}},"Link to ",o),r.createElement("img",(0,u.Z)({src:f,className:l?"invertible":"",alt:o},c)))}}}]);